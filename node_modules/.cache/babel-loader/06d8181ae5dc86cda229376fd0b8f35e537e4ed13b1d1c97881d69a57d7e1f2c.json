{"ast":null,"code":"var _jsxFileName = \"/Users/eirenefalloran/Documents/Kodego/my development process/reactproj-with-working-edit-modal/src/MyApp.js\";\n// // App.js File\n// import React, { Component } from \"react\";\n// import \"bootstrap/dist/css/bootstrap.css\";\n// import Container from \"react-bootstrap/Container\";\n// import Row from \"react-bootstrap/Row\";\n// import Col from \"react-bootstrap/Col\";\n// import Button from \"react-bootstrap/Button\";\n// import InputGroup from \"react-bootstrap/InputGroup\";\n// import FormControl from \"react-bootstrap/FormControl\";\n// import ListGroup from \"react-bootstrap/ListGroup\";\n\n// class App extends Component {\n// \tconstructor(props) {\n// \t\tsuper(props);\n\n// \t\t// Setting up state\n// \t\tthis.state = {\n// \t\t\tuserInput: \"\",\n// \t\t\tlist: [],\n// \t\t};\n// \t}\n\n// \t// Set a user input value\n// \tupdateInput(value) {\n// \t\tthis.setState({\n// \t\t\tuserInput: value,\n// \t\t});\n// \t}\n\n// \t// Add item if user input in not empty\n// \taddItem() {\n// \t\tif (this.state.userInput !== \"\") {\n// \t\t\tconst userInput = {\n// \t\t\t\t// Add a random id which is used to delete\n// \t\t\t\tid: Math.random(),\n\n// \t\t\t\t// Add a user value to list\n// \t\t\t\tvalue: this.state.userInput,\n// \t\t\t};\n\n// \t\t\t// Update list\n// \t\t\tconst list = [...this.state.list];\n// \t\t\tlist.push(userInput);\n\n// \t\t\t// reset state\n// \t\t\tthis.setState({\n// \t\t\t\tlist,\n// \t\t\t\tuserInput: \"\",\n// \t\t\t});\n// \t\t}\n// \t}\n\n// \t// Function to delete item from list use id to delete\n// \tdeleteItem(key) {\n// \t\tconst list = [...this.state.list];\n\n// \t\t// Filter values and leave value which we need to delete\n// \t\tconst updateList = list.filter((item) => item.id !== key);\n\n// \t\t// Update list in state\n// \t\tthis.setState({\n// \t\t\tlist: updateList,\n// \t\t});\n// \t}\n\n// \teditItem = (index) => {\n\n// \tconst todos = [...this.state.list];\n// \tconst editedTodo = prompt('Edit the todo:');\n// \tif (editedTodo !== null && editedTodo.trim() !== '') {\n// \t\tlet updatedTodos = [...todos]\n// \t\tupdatedTodos[index].value= editedTodo\n// \t\tthis.setState({\n// \t\tlist: updatedTodos,\n// \t});\n// \t}\n// \t}\n\n// \trender() {\n\n// \t\treturn (\n\n// \t\t\t<Container>\n\n// \t\t\t\t<Row\n// \t\t\t\t\tstyle={{\n\n// \t\t\t\t\t\tdisplay: \"flex\",\n// \t\t\t\t\t\tjustifyContent: \"center\",\n// \t\t\t\t\t\talignItems: \"left\",\n// \t\t\t\t\t\tfontSize: \"2rem\",\n// \t\t\t\t\t\tfontWeight: \"bolder\",\n// \t\t\t\t\t}}\n// \t\t\t\t>\n// \t\t\t\t\tThoughts for the Day\n\n// \t\t\t\t<hr />\n// \t\t\t\t<Row>\n// \t\t\t\t\t<Col md={{ span: 20, offset: 0 }}>\n// \t\t\t\t\t\t<InputGroup className=\"mb-9\">\n// \t\t\t\t\t\t\t<FormControl \n//             \ttype=\"date\" placeholder=\"mm/dd/yyyyyy\" name=\"date\" \n\n// \t\t\t\t\t\t\t\tvalue={this.state.userInput}\n// \t\t\t\t\t\t\t\tonChange={(item) =>\n// \t\t\t\t\t\t\t\t\tthis.updateInput(item.target.value)\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\taria-label=\"add something\"\n// \t\t\t\t\t\t\t\taria-describedby=\"basic-addon2\"\n// \t\t\t\t\t\t\t/>\n\n// \t\t\t\t\t\t\t<InputGroup>\n\n// \t\t\t\t\t\t\t</InputGroup>\n// \t\t\t\t\t\t</InputGroup>\n//             <FormControl \n//             \ttype=\"text\" placeholder=\"Add Item....\" name=\"text\" \n//               value={this.state.userInput}\n// \t\t\t\t\t\t\t\tonChange={(item) =>\n// \t\t\t\t\t\t\t\t\tthis.updateInput(item.target.value)\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\taria-label=\"add something\"\n// \t\t\t\t\t\t\t\taria-describedby=\"basic-addon2\"\n// \t\t\t\t\t\t\t/>\n// \t\t\t\t\t\t\t<InputGroup>\n// \t\t\t\t\t\t\t<Button\n// \t\t\t\t\t\t\t\t\tvariant=\"btn btn-success\"\n// \t\t\t\t\t\t\t\t\tclassName=\"mt-2\"\n// \t\t\t\t\t\t\t\t\tonClick={() => this.addItem()}\n// \t\t\t\t\t\t\t\t>\n// \t\t\t\t\t\t\t\t\tAdd+\n// \t\t\t\t\t\t\t\t</Button>\n// \t\t\t\t\t\t\t</InputGroup>\n// \t\t\t\t\t</Col>\n// \t\t\t\t</Row>\n// \t\t\t\t<Row>\n// \t\t\t\t\t<Col md={{ span: 20, offset: 0 }}>\n// \t\t\t\t\t\t<ListGroup>\n// \t\t\t\t\t\t\t{/* map over and print items */}\n// \t\t\t\t\t\t\t{this.state.list.map((item, index) => {\n// \t\t\t\t\t\t\t\treturn (\n// \t\t\t\t\t\t\t\t<div key = {index} >\n// \t\t\t\t\t\t\t\t\t<ListGroup.Item\n// \t\t\t\t\t\t\t\t\t\tvariant=\"success\"\n// \t\t\t\t\t\t\t\t\t\taction\n// \t\t\t\t\t\t\t\t\t\tstyle={{display:\"left\",\n// \t\t\t\t\t\t\t\t\t\t\t\tjustifyContent:'space-between'\n// \t\t\t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\t\t\t>\n// \t\t\t\t\t\t\t\t\t\t{item.value}\n// \t\t\t\t\t\t\t\t\t\t<span>\n// \t\t\t\t\t\t\t\t\t\t<Button style={{marginRight:\"10px\"}}\n// \t\t\t\t\t\t\t\t\t\tvariant = \"danger\"\n// \t\t\t\t\t\t\t\t\t\tonClick={() => this.deleteItem(item.id)}>\n// \t\t\t\t\t\t\t\t\t\tDelete\n// \t\t\t\t\t\t\t\t\t\t</Button>\n// \t\t\t\t\t\t\t\t\t\t<Button variant = \"success\"\n// \t\t\t\t\t\t\t\t\t\tonClick={() => this.editItem(index)}>\n// \t\t\t\t\t\t\t\t\t\tEdit\n// \t\t\t\t\t\t\t\t\t\t</Button>\n// \t\t\t\t\t\t\t\t\t\t</span>\n// \t\t\t\t\t\t\t\t\t</ListGroup.Item>\n// \t\t\t\t\t\t\t\t</div>\n// \t\t\t\t\t\t\t\t);\n// \t\t\t\t\t\t\t})}\n// \t\t\t\t\t\t</ListGroup>\n// \t\t\t\t\t</Col>\n// \t\t\t\t</Row>\n\n//         </Row>\n// \t\t\t</Container>\n\n// \t\t);\n// \t}\n// }\n\n// export default App;\n\nimport React from 'react';\nimport { Component } from \"react\";\nimport { Form, Button, ListGroup } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass MyApp extends Component {\n  constructor() {\n    super();\n    // addTodo: add a new task inside the state\n    this.addTodo = event => {\n      event.preventDefault(); // stop default behaviour\n      //console.log(event.target.taskTitle.value);\n      const data = event.target,\n        newTodo = {\n          taskTitle: data.taskTitle.value,\n          date: data.date.value,\n          time: data.time.value\n        };\n      //console.log(newTodo);\n      // updating the array but not re-rendering\n      this.state.todoList.push(newTodo);\n      // updating state and re-render\n      this.setState({\n        todoList: this.state.todoList\n      });\n    };\n    // delete todo from the array\n    this.deleteTodo = event => {\n      // splice(indexNumber, howmanyTodelete)\n      this.state.todoList.splice(event.target.value, 1);\n      this.setState({\n        todoList: this.state.todoList\n      });\n    };\n    this.state = {\n      todoList: [] // default empty array\n    };\n  }\n\n  render() {\n    console.log(this.state.todoList);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Thoughts of the Day\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: this.addTodo,\n        md: {\n          span: 20,\n          offset: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formBasicTaskTitle\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Task Title:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter A Task\",\n            name: \"taskTitle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formBasicDate\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Task date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"date\",\n            placeholder: \"mm/dd/yyyy\",\n            name: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"formBasicTime\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Task Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"time\",\n            placeholder: \"Enter the Time\",\n            name: \"time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: \"btn btn-success\",\n          children: \"Add+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: this.state.todoList.map((task, index) => {\n          return /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            variant: \"success\",\n            children: [task.taskTitle, \" at \", task.time, \", Date: \", task.date, /*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              variant: \"danger\",\n              onClick: this.deleteTodo,\n              value: index,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 34\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n}\nexport default MyApp;","map":{"version":3,"names":["React","Component","Form","Button","ListGroup","jsxDEV","_jsxDEV","Fragment","_Fragment","MyApp","constructor","addTodo","event","preventDefault","data","target","newTodo","taskTitle","value","date","time","state","todoList","push","setState","deleteTodo","splice","render","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","md","span","offset","Group","controlId","Label","Control","type","placeholder","name","className","map","task","index","Item","variant","onClick"],"sources":["/Users/eirenefalloran/Documents/Kodego/my development process/reactproj-with-working-edit-modal/src/MyApp.js"],"sourcesContent":["// // App.js File\r\n// import React, { Component } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.css\";\r\n// import Container from \"react-bootstrap/Container\";\r\n// import Row from \"react-bootstrap/Row\";\r\n// import Col from \"react-bootstrap/Col\";\r\n// import Button from \"react-bootstrap/Button\";\r\n// import InputGroup from \"react-bootstrap/InputGroup\";\r\n// import FormControl from \"react-bootstrap/FormControl\";\r\n// import ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\n// class App extends Component {\r\n// \tconstructor(props) {\r\n// \t\tsuper(props);\r\n\r\n// \t\t// Setting up state\r\n// \t\tthis.state = {\r\n// \t\t\tuserInput: \"\",\r\n// \t\t\tlist: [],\r\n// \t\t};\r\n// \t}\r\n\r\n// \t// Set a user input value\r\n// \tupdateInput(value) {\r\n// \t\tthis.setState({\r\n// \t\t\tuserInput: value,\r\n// \t\t});\r\n// \t}\r\n\r\n// \t// Add item if user input in not empty\r\n// \taddItem() {\r\n// \t\tif (this.state.userInput !== \"\") {\r\n// \t\t\tconst userInput = {\r\n// \t\t\t\t// Add a random id which is used to delete\r\n// \t\t\t\tid: Math.random(),\r\n\r\n// \t\t\t\t// Add a user value to list\r\n// \t\t\t\tvalue: this.state.userInput,\r\n// \t\t\t};\r\n\r\n// \t\t\t// Update list\r\n// \t\t\tconst list = [...this.state.list];\r\n// \t\t\tlist.push(userInput);\r\n\r\n// \t\t\t// reset state\r\n// \t\t\tthis.setState({\r\n// \t\t\t\tlist,\r\n// \t\t\t\tuserInput: \"\",\r\n// \t\t\t});\r\n// \t\t}\r\n// \t}\r\n\r\n// \t// Function to delete item from list use id to delete\r\n// \tdeleteItem(key) {\r\n// \t\tconst list = [...this.state.list];\r\n\r\n// \t\t// Filter values and leave value which we need to delete\r\n// \t\tconst updateList = list.filter((item) => item.id !== key);\r\n\r\n// \t\t// Update list in state\r\n// \t\tthis.setState({\r\n// \t\t\tlist: updateList,\r\n// \t\t});\r\n// \t}\r\n\r\n// \teditItem = (index) => {\r\n    \r\n// \tconst todos = [...this.state.list];\r\n// \tconst editedTodo = prompt('Edit the todo:');\r\n// \tif (editedTodo !== null && editedTodo.trim() !== '') {\r\n// \t\tlet updatedTodos = [...todos]\r\n// \t\tupdatedTodos[index].value= editedTodo\r\n// \t\tthis.setState({\r\n// \t\tlist: updatedTodos,\r\n// \t});\r\n// \t}\r\n// \t}\r\n\r\n// \trender() {\r\n\r\n// \t\treturn (\r\n    \r\n// \t\t\t<Container>\r\n       \r\n// \t\t\t\t<Row\r\n// \t\t\t\t\tstyle={{\r\n           \r\n// \t\t\t\t\t\tdisplay: \"flex\",\r\n// \t\t\t\t\t\tjustifyContent: \"center\",\r\n// \t\t\t\t\t\talignItems: \"left\",\r\n// \t\t\t\t\t\tfontSize: \"2rem\",\r\n// \t\t\t\t\t\tfontWeight: \"bolder\",\r\n// \t\t\t\t\t}}\r\n// \t\t\t\t>\r\n// \t\t\t\t\tThoughts for the Day\r\n\t\t\t\r\n\r\n// \t\t\t\t<hr />\r\n// \t\t\t\t<Row>\r\n// \t\t\t\t\t<Col md={{ span: 20, offset: 0 }}>\r\n// \t\t\t\t\t\t<InputGroup className=\"mb-9\">\r\n// \t\t\t\t\t\t\t<FormControl \r\n//             \ttype=\"date\" placeholder=\"mm/dd/yyyyyy\" name=\"date\" \r\n\r\n// \t\t\t\t\t\t\t\tvalue={this.state.userInput}\r\n// \t\t\t\t\t\t\t\tonChange={(item) =>\r\n// \t\t\t\t\t\t\t\t\tthis.updateInput(item.target.value)\r\n// \t\t\t\t\t\t\t\t}\r\n// \t\t\t\t\t\t\t\taria-label=\"add something\"\r\n// \t\t\t\t\t\t\t\taria-describedby=\"basic-addon2\"\r\n// \t\t\t\t\t\t\t/>\r\n              \r\n             \r\n              \t\r\n// \t\t\t\t\t\t\t<InputGroup>\r\n\t\t\t\t\t\t\t\t\r\n// \t\t\t\t\t\t\t</InputGroup>\r\n// \t\t\t\t\t\t</InputGroup>\r\n//             <FormControl \r\n//             \ttype=\"text\" placeholder=\"Add Item....\" name=\"text\" \r\n//               value={this.state.userInput}\r\n// \t\t\t\t\t\t\t\tonChange={(item) =>\r\n// \t\t\t\t\t\t\t\t\tthis.updateInput(item.target.value)\r\n// \t\t\t\t\t\t\t\t}\r\n// \t\t\t\t\t\t\t\taria-label=\"add something\"\r\n// \t\t\t\t\t\t\t\taria-describedby=\"basic-addon2\"\r\n// \t\t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t\t<InputGroup>\r\n// \t\t\t\t\t\t\t<Button\r\n// \t\t\t\t\t\t\t\t\tvariant=\"btn btn-success\"\r\n// \t\t\t\t\t\t\t\t\tclassName=\"mt-2\"\r\n// \t\t\t\t\t\t\t\t\tonClick={() => this.addItem()}\r\n// \t\t\t\t\t\t\t\t>\r\n// \t\t\t\t\t\t\t\t\tAdd+\r\n// \t\t\t\t\t\t\t\t</Button>\r\n// \t\t\t\t\t\t\t</InputGroup>\r\n// \t\t\t\t\t</Col>\r\n// \t\t\t\t</Row>\r\n// \t\t\t\t<Row>\r\n// \t\t\t\t\t<Col md={{ span: 20, offset: 0 }}>\r\n// \t\t\t\t\t\t<ListGroup>\r\n// \t\t\t\t\t\t\t{/* map over and print items */}\r\n// \t\t\t\t\t\t\t{this.state.list.map((item, index) => {\r\n// \t\t\t\t\t\t\t\treturn (\r\n// \t\t\t\t\t\t\t\t<div key = {index} >\r\n// \t\t\t\t\t\t\t\t\t<ListGroup.Item\r\n// \t\t\t\t\t\t\t\t\t\tvariant=\"success\"\r\n// \t\t\t\t\t\t\t\t\t\taction\r\n// \t\t\t\t\t\t\t\t\t\tstyle={{display:\"left\",\r\n// \t\t\t\t\t\t\t\t\t\t\t\tjustifyContent:'space-between'\r\n// \t\t\t\t\t\t\t\t\t}}\r\n// \t\t\t\t\t\t\t\t\t>\r\n// \t\t\t\t\t\t\t\t\t\t{item.value}\r\n// \t\t\t\t\t\t\t\t\t\t<span>\r\n// \t\t\t\t\t\t\t\t\t\t<Button style={{marginRight:\"10px\"}}\r\n// \t\t\t\t\t\t\t\t\t\tvariant = \"danger\"\r\n// \t\t\t\t\t\t\t\t\t\tonClick={() => this.deleteItem(item.id)}>\r\n// \t\t\t\t\t\t\t\t\t\tDelete\r\n// \t\t\t\t\t\t\t\t\t\t</Button>\r\n// \t\t\t\t\t\t\t\t\t\t<Button variant = \"success\"\r\n// \t\t\t\t\t\t\t\t\t\tonClick={() => this.editItem(index)}>\r\n// \t\t\t\t\t\t\t\t\t\tEdit\r\n// \t\t\t\t\t\t\t\t\t\t</Button>\r\n// \t\t\t\t\t\t\t\t\t\t</span>\r\n// \t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n// \t\t\t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t\t\t);\r\n// \t\t\t\t\t\t\t})}\r\n// \t\t\t\t\t\t</ListGroup>\r\n// \t\t\t\t\t</Col>\r\n// \t\t\t\t</Row>\r\n\r\n      \r\n//         </Row>\r\n// \t\t\t</Container>\r\n\r\n      \r\n  \r\n// \t\t);\r\n// \t}\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n\r\n\r\nimport React from 'react'\r\nimport { Component } from \"react\";\r\nimport { Form, Button, ListGroup } from \"react-bootstrap\";\r\n\r\nclass MyApp extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            todoList: [] // default empty array\r\n        }\r\n    }\r\n    // addTodo: add a new task inside the state\r\n    addTodo = (event)=> {\r\n        event.preventDefault(); // stop default behaviour\r\n        //console.log(event.target.taskTitle.value);\r\n        const data = event.target,\r\n        newTodo = {\r\n            taskTitle: data.taskTitle.value,\r\n            date: data.date.value,\r\n            time: data.time.value\r\n        }\r\n        //console.log(newTodo);\r\n        // updating the array but not re-rendering\r\n        this.state.todoList.push(newTodo);\r\n        // updating state and re-render\r\n        this.setState({\r\n            todoList: this.state.todoList\r\n        })\r\n    }\r\n    // delete todo from the array\r\n    deleteTodo = (event)=> {\r\n        // splice(indexNumber, howmanyTodelete)\r\n        this.state.todoList.splice(event.target.value, 1)\r\n        this.setState({\r\n            todoList: this.state.todoList\r\n        })\r\n    }\r\n    render() {\r\n        console.log(this.state.todoList)\r\n        return(\r\n            <>\r\n            \r\n            <h1>Thoughts of the Day</h1>\r\n    \r\n            <Form onSubmit={this.addTodo}  md={{ span: 20, offset: 1}}>\r\n                <Form.Group controlId=\"formBasicTaskTitle\">\r\n                    <Form.Label>Task Title:</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter A Task\" name=\"taskTitle\"/>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicDate\">\r\n                    <Form.Label>Task date:</Form.Label>\r\n                    <Form.Control type=\"date\" placeholder=\"mm/dd/yyyy\" name=\"date\"/>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicTime\">\r\n                    <Form.Label>Task Time:</Form.Label>\r\n                    <Form.Control type=\"time\" placeholder=\"Enter the Time\" name=\"time\"/>\r\n                </Form.Group>\r\n                <Button type=\"submit\" className=\"btn btn-success\">\r\n                    Add+\r\n                </Button>\r\n            </Form>\r\n\r\n            <ListGroup>\r\n                {\r\n                    this.state.todoList.map((task, index)=> {\r\n                        return(\r\n                            <ListGroup.Item key={index} variant=\"success\">\r\n                                 {task.taskTitle} at {task.time}, Date: {task.date}\r\n                                 <Button type=\"button\" variant=\"danger\" onClick={this.deleteTodo} value={index}>\r\n                                     Delete\r\n                                 </Button>\r\n                            </ListGroup.Item>\r\n                        )\r\n                    })\r\n                }\r\n            </ListGroup>\r\n        \r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MyApp;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAIA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,IAAI,EAAEC,MAAM,EAAEC,SAAS,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1D,MAAMC,KAAK,SAASR,SAAS;EACzBS,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IAKX;IAAA,KACAC,OAAO,GAAIC,KAAK,IAAI;MAChBA,KAAK,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;MACxB;MACA,MAAMC,IAAI,GAAGF,KAAK,CAACG,MAAM;QACzBC,OAAO,GAAG;UACNC,SAAS,EAAEH,IAAI,CAACG,SAAS,CAACC,KAAK;UAC/BC,IAAI,EAAEL,IAAI,CAACK,IAAI,CAACD,KAAK;UACrBE,IAAI,EAAEN,IAAI,CAACM,IAAI,CAACF;QACpB,CAAC;MACD;MACA;MACA,IAAI,CAACG,KAAK,CAACC,QAAQ,CAACC,IAAI,CAACP,OAAO,CAAC;MACjC;MACA,IAAI,CAACQ,QAAQ,CAAC;QACVF,QAAQ,EAAE,IAAI,CAACD,KAAK,CAACC;MACzB,CAAC,CAAC;IACN,CAAC;IACD;IAAA,KACAG,UAAU,GAAIb,KAAK,IAAI;MACnB;MACA,IAAI,CAACS,KAAK,CAACC,QAAQ,CAACI,MAAM,CAACd,KAAK,CAACG,MAAM,CAACG,KAAK,EAAE,CAAC,CAAC;MACjD,IAAI,CAACM,QAAQ,CAAC;QACVF,QAAQ,EAAE,IAAI,CAACD,KAAK,CAACC;MACzB,CAAC,CAAC;IACN,CAAC;IA7BG,IAAI,CAACD,KAAK,GAAG;MACTC,QAAQ,EAAE,EAAE,CAAC;IACjB,CAAC;EACL;;EA2BAK,MAAMA,CAAA,EAAG;IACLC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,KAAK,CAACC,QAAQ,CAAC;IAChC,oBACIhB,OAAA,CAAAE,SAAA;MAAAsB,QAAA,gBAEAxB,OAAA;QAAAwB,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAE5B5B,OAAA,CAACJ,IAAI;QAACiC,QAAQ,EAAE,IAAI,CAACxB,OAAQ;QAAEyB,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAC,CAAE;QAAAR,QAAA,gBACtDxB,OAAA,CAACJ,IAAI,CAACqC,KAAK;UAACC,SAAS,EAAC,oBAAoB;UAAAV,QAAA,gBACtCxB,OAAA,CAACJ,IAAI,CAACuC,KAAK;YAAAX,QAAA,EAAC;UAAW;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACpC5B,OAAA,CAACJ,IAAI,CAACwC,OAAO;YAACC,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC,cAAc;YAACC,IAAI,EAAC;UAAW;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC,eACb5B,OAAA,CAACJ,IAAI,CAACqC,KAAK;UAACC,SAAS,EAAC,eAAe;UAAAV,QAAA,gBACjCxB,OAAA,CAACJ,IAAI,CAACuC,KAAK;YAAAX,QAAA,EAAC;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACnC5B,OAAA,CAACJ,IAAI,CAACwC,OAAO;YAACC,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC,YAAY;YAACC,IAAI,EAAC;UAAM;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CAAC,eACb5B,OAAA,CAACJ,IAAI,CAACqC,KAAK;UAACC,SAAS,EAAC,eAAe;UAAAV,QAAA,gBACjCxB,OAAA,CAACJ,IAAI,CAACuC,KAAK;YAAAX,QAAA,EAAC;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACnC5B,OAAA,CAACJ,IAAI,CAACwC,OAAO;YAACC,IAAI,EAAC,MAAM;YAACC,WAAW,EAAC,gBAAgB;YAACC,IAAI,EAAC;UAAM;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5D,CAAC,eACb5B,OAAA,CAACH,MAAM;UAACwC,IAAI,EAAC,QAAQ;UAACG,SAAS,EAAC,iBAAiB;UAAAhB,QAAA,EAAC;QAElD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC,eAEP5B,OAAA,CAACF,SAAS;QAAA0B,QAAA,EAEF,IAAI,CAACT,KAAK,CAACC,QAAQ,CAACyB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAI;UACpC,oBACI3C,OAAA,CAACF,SAAS,CAAC8C,IAAI;YAAaC,OAAO,EAAC,SAAS;YAAArB,QAAA,GACvCkB,IAAI,CAAC/B,SAAS,EAAC,MAAI,EAAC+B,IAAI,CAAC5B,IAAI,EAAC,UAAQ,EAAC4B,IAAI,CAAC7B,IAAI,eACjDb,OAAA,CAACH,MAAM;cAACwC,IAAI,EAAC,QAAQ;cAACQ,OAAO,EAAC,QAAQ;cAACC,OAAO,EAAE,IAAI,CAAC3B,UAAW;cAACP,KAAK,EAAE+B,KAAM;cAAAnB,QAAA,EAAC;YAE/E;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA,GAJOe,KAAK;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKV,CAAC;QAEzB,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEC,CAAC;IAAA,eAEV,CAAC;EAEX;AACJ;AAEA,eAAezB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}